#include "plugin.hpp"
#include "Chord2Components.h"

ParamId switchParamMap[] = // can't guarantee order of params in ParamId enum when autogenerated
{
    N0_PARAM,
    N1_PARAM,
    N2_PARAM,
    N3_PARAM,
    N4_PARAM,
    N5_PARAM,
    N6_PARAM,
    N7_PARAM,
    N8_PARAM,
    N9_PARAM,
    N10_PARAM,
    N11_PARAM,
    N12_PARAM
};


#define MAXCHANS 8




struct Chord2 : Module {
    dsp::ClockDivider divider;
    dsp::ClockDivider lightdivider;
    
    // "volume" level for each note. Turn on, it will fade up. Turn off, it will fade down.
    float amp[13]; 
    // delta volume
    float delta[13];
    
    Chord2() {
        // CAREFUL - we're using the same IDs for lights as params
        config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN,
               PARAMS_LEN-1 // -1 because of RATE
               );
        
        for(int i=0;i<=12;i++){
            configSwitch(switchParamMap[i], 0.0f, 1.0f, 0.0f,
                         string::f("%d semitones above root",i));
            amp[i]=0;
            delta[i]=0;
        }
        configParam(RATE_PARAM, 0.0f, 1.0f, 0.5f, "rate of amp. change");
        configInput(ROOT_INPUT, "Mono 1V/CV input");
        configOutput(POLY_OUTPUT, "Poly 1V/oct output");
        configOutput(CVOUT_OUTPUT, "Poly amplitude CV output");
        
        divider.setDivision(16);
    }
    
    void process(const ProcessArgs& args) override {
        float rate = params[RATE_PARAM].getValue() * 0.01f;
        rate *= rate;
        for(int i=0;i<=12;i++){
            float v= params[switchParamMap[i]].getValue();
            
            if(v>=0.1f)
                delta[i] = 1.0f;
            else
                delta[i] = -1.0f;
            
            amp[i] = rack::math::clamp(amp[i]+delta[i]*rate,0.0f,1.0f);
            lights[switchParamMap[i]].setBrightness(amp[i]);
        }
        
        if(outputs[POLY_OUTPUT].isConnected()){
            int chan = 0;
            if(inputs[ROOT_INPUT].isConnected()){
                // get root note
                int root = (int)((inputs[ROOT_INPUT].getVoltage()*12.0f)+0.001f);
                for(int i=0;i<=12;i++){
                    float a = amp[i];
                    // this one's on; get the output note
                    if(a>0 && chan<MAXCHANS){
                        int note = root+i;
                        float pitch = ((float)note)/12.0f;
                        outputs[CVOUT_OUTPUT].setVoltage(a*10.0f,chan);
                        outputs[POLY_OUTPUT].setVoltage(pitch,chan++);
                    }
                }
            }
                
            for(int i=chan;i<MAXCHANS;i++){
                outputs[CVOUT_OUTPUT].setVoltage(0,i);
                outputs[POLY_OUTPUT].setVoltage(0,i);
            }
                
            outputs[CVOUT_OUTPUT].setChannels(MAXCHANS);
            outputs[POLY_OUTPUT].setChannels(MAXCHANS);
        }
        
    }
};


struct Chord2Widget : ModuleWidget {
    
#define BUTTONSTYLE VCVLightBezelLatch<>
#define KNOBSTYLE RoundBlackKnob
    
    Chord2Widget(Chord2* module) {
        setModule(module);
        setPanel(createPanel(asset::plugin(pluginInstance, "res/Chord2.svg")));
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        
        
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N0_PARAM_POS), module, N0_PARAM, N0_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N1_PARAM_POS), module, N1_PARAM, N1_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N2_PARAM_POS), module, N2_PARAM, N2_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N3_PARAM_POS), module, N3_PARAM, N3_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N4_PARAM_POS), module, N4_PARAM, N4_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N5_PARAM_POS), module, N5_PARAM, N5_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N6_PARAM_POS), module, N6_PARAM, N6_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N7_PARAM_POS), module, N7_PARAM, N7_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N8_PARAM_POS), module, N8_PARAM, N8_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N9_PARAM_POS), module, N9_PARAM, N9_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N10_PARAM_POS), module, N10_PARAM, N10_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N11_PARAM_POS), module, N11_PARAM, N11_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N12_PARAM_POS), module, N12_PARAM, N12_PARAM));
        
        addParam(createParamCentered<KNOBSTYLE>(mm2px(RATE_PARAM_POS), module, RATE_PARAM));
        
        addInput(createInputCentered<PJ301MPort>(mm2px(ROOT_INPUT_POS), module, ROOT_INPUT));
        addOutput(createOutputCentered<PJ301MPort>(mm2px(POLY_OUTPUT_POS), module, POLY_OUTPUT));
        addOutput(createOutputCentered<PJ301MPort>(mm2px(CVOUT_OUTPUT_POS), module, CVOUT_OUTPUT));
    }
};


Model* modelChord2 = createModel<Chord2, Chord2Widget>("Lliw2");