#include "plugin.hpp"
#include "ChordComponents.h"

ParamId paramMap[] = // can't guarantee order of params in ParamId enum when autogenerated
{
    N0_PARAM,
    N1_PARAM,
    N2_PARAM,
    N3_PARAM,
    N4_PARAM,
    N5_PARAM,
    N6_PARAM,
    N7_PARAM,
    N8_PARAM,
    N9_PARAM,
    N10_PARAM,
    N11_PARAM,
    N12_PARAM
};
    

struct Chord : Module {
    dsp::ClockDivider divider;
    dsp::ClockDivider lightdivider;
    
    bool on[13];
          
    Chord() {
        // CAREFUL - we're using the same IDs for lights as params
        config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, PARAMS_LEN);
        
        for(int i=0;i<=12;i++){
            configSwitch(paramMap[i], 0.0f, 1.0f, 0.0f,
                         string::f("%d semitones above root",i));
        }
        configInput(ROOT_INPUT, "Polyphonic CV input");
        configOutput(POLY_OUTPUT, "CV output");
        
        divider.setDivision(16);
        lightdivider.setDivision(128);
    }
    
    void process(const ProcessArgs& args) override {
        if(divider.process()){
            for(int i=0;i<=12;i++){
                on[i] = params[paramMap[i]].getValue()>0.1f;
                lights[paramMap[i]].setBrightness(on[i]);
            }
        }
        
        if(outputs[POLY_OUTPUT].isConnected()){
            int chans=0;
            if(inputs[ROOT_INPUT].isConnected()){
                // get root note
                int root = (int)((inputs[ROOT_INPUT].getVoltage()*12.0f)+0.001f);
                for(int i=0;i<=12;i++){
                    if(on[i]){
                        // this one's on; get the output note
                        int note = root+i;
                        float pitch = ((float)note)/12.0f;
                        outputs[POLY_OUTPUT].setVoltage(pitch,chans++);
                    }
                }
                if(chans){
                    outputs[POLY_OUTPUT].setChannels(chans);
                } else {
                    outputs[POLY_OUTPUT].setVoltage(0);
                }
            } else {
                outputs[POLY_OUTPUT].setVoltage(0);
            }
        }
        
        if(lightdivider.process()){
            for(int i=0;i<=12;i++){
                lights[paramMap[i]].setBrightness(on[i]);
            }
        }        
    }
};


struct ChordWidget : ModuleWidget {
    
#define BUTTONSTYLE VCVLightBezelLatch<>
    
    ChordWidget(Chord* module) {
        setModule(module);
        setPanel(createPanel(asset::plugin(pluginInstance, "res/Chord.svg")));
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
        addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
        
        
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N0_PARAM_POS), module, N0_PARAM, N0_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N1_PARAM_POS), module, N1_PARAM, N1_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N2_PARAM_POS), module, N2_PARAM, N2_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N3_PARAM_POS), module, N3_PARAM, N3_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N4_PARAM_POS), module, N4_PARAM, N4_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N5_PARAM_POS), module, N5_PARAM, N5_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N6_PARAM_POS), module, N6_PARAM, N6_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N7_PARAM_POS), module, N7_PARAM, N7_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N8_PARAM_POS), module, N8_PARAM, N8_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N9_PARAM_POS), module, N9_PARAM, N9_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N10_PARAM_POS), module, N10_PARAM, N10_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N11_PARAM_POS), module, N11_PARAM, N11_PARAM));
        addParam(createLightParamCentered<BUTTONSTYLE>(mm2px(N12_PARAM_POS), module, N12_PARAM, N12_PARAM));

        addInput(createInputCentered<PJ301MPort>(mm2px(ROOT_INPUT_POS), module, ROOT_INPUT));
        addOutput(createOutputCentered<PJ301MPort>(mm2px(POLY_OUTPUT_POS), module, POLY_OUTPUT));
    }
};


Model* modelChord = createModel<Chord, ChordWidget>("Lliw");