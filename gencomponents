#!/usr/bin/env python3

import sys
import argparse
import os
import re
import json
import xml.etree.ElementTree

# Version check
from typing import List, Dict

f"Python 3.6+ is required"


class UserException(Exception):
	pass


def eprint(*args, **kwargs):
	print(*args, file=sys.stderr, **kwargs)


def str_to_identifier(s):
	if not s:
		return "_"
	# Identifiers can't start with a number
	if s[0].isdigit():
		s = "_" + s
	# Capitalize first letter
	s = s[0].upper() + s[1:]
	# Replace special characters with underscore
	s = re.sub(r'\W', '_', s)
	return s

# sorts by top-left, but ALSO if Z is in the name we add lots, so they
# go at the end.

def top_left_sort(w):
    ss = w['cy'] + 0.01 * w['cx']
    if w['name'].lower().startswith('z'):
        ss += 10000
    return ss



def panel_to_components(tree):
	ns = {
		"svg": "http://www.w3.org/2000/svg",
		"inkscape": "http://www.inkscape.org/namespaces/inkscape",
	}

	root = tree.getroot()
	# Get SVG scale relative to mm
	root_height = root.get('height')
	if root_height.endswith("mm"):
		scale = 1
	else:
		svg_dpi = 75
		mm_per_in = 25.4
		scale = mm_per_in / svg_dpi

	# Get components layer
	group = root.find(".//svg:g[@inkscape:label='components']", ns)
	# Illustrator uses `data-name` (in Unique object ID mode) or `id` (in Layer Names object ID mode) for the group name.
	# Don't test with `not group` since Elements with no subelements are falsy.
	if group is None:
		group = root.find(".//svg:g[@data-name='components']", ns)
	if group is None:
		group = root.find(".//svg:g[@id='components']", ns)
	if group is None:
		raise UserException("Could not find \"components\" layer on panel")

	components = {}
	components['params'] = []
	components['inputs'] = []
	components['outputs'] = []
	components['lights'] = []
	components['widgets'] = []

	for el in group:
		c = {}

		# Get name
		name = el.get('{' + ns['inkscape'] + '}label')
		# Illustrator names
		if not name:
			name = el.get('data-name')
		if not name:
			name = el.get('id')
		if not name:
			name = ""
		# Split name and component class name
		names = name.split('#', 1)
		name = names[0]
		if len(names) >= 2:
			c['cls'] = names[1]
		name = str_to_identifier(name).upper()
		c['name'] = name

		# Get position
		if el.tag == '{' + ns['svg'] + '}rect':
			x = float(el.get('x')) * scale
			y = float(el.get('y')) * scale
			width = float(el.get('width')) * scale
			height = float(el.get('height')) * scale
			c['x'] = round(x, 3)
			c['y'] = round(y, 3)
			c['width'] = round(width, 3)
			c['height'] = round(height, 3)
			c['cx'] = round(x + width / 2, 3)
			c['cy'] = round(y + height / 2, 3)
		elif el.tag == '{' + ns['svg'] + '}circle' or el.tag == '{' + ns['svg'] + '}ellipse':
			cx = float(el.get('cx')) * scale
			cy = float(el.get('cy')) * scale
			c['cx'] = round(cx, 3)
			c['cy'] = round(cy, 3)
		else:
			eprint(f"Element in components layer is not rect, circle, or ellipse: {el}")
			continue

		# Get color
		color = None
		# Get color from fill attribute
		fill = el.get('fill')
		if fill:
			color = fill
		# Get color from CSS fill style
		if not color:
			style = el.get('style')
			if style:
				color_match = re.search(r'fill:\S*(#[0-9a-fA-F]{6})', style)
				color = color_match.group(1)
		if not color:
			eprint(f"Cannot get color of component: {el}")
			continue

		color = color.lower()

		if color == '#ff0000' or color == '#f00' or color == 'red':
			components['params'].append(c)
		if color == '#00ff00' or color == '#0f0' or color == 'lime' or color == 'green':
			components['inputs'].append(c)
		if color == '#0000ff' or color == '#00f' or color == 'blue':
			components['outputs'].append(c)
		if color == '#ff00ff' or color == '#f0f' or color == 'magenta':
			components['lights'].append(c)
		if color == '#ffff00' or color == '#ff0' or color == 'yellow':
			components['widgets'].append(c)

	components['params'] = sorted(components['params'], key=top_left_sort)
	components['inputs'] = sorted(components['inputs'], key=top_left_sort)
	components['outputs'] = sorted(components['outputs'], key=top_left_sort)
	components['lights'] = sorted(components['lights'], key=top_left_sort)
	components['widgets'] = sorted(components['widgets'], key=top_left_sort)

	eprint(
		f"Found {len(components['params'])} params, {len(components['inputs'])} inputs, {len(components['outputs'])} outputs, {len(components['lights'])} lights, and {len(components['widgets'])} custom widgets in \"components\" layer.")
	return components


def output_pos_data(typeName: str, data: List[Dict]):
	out = ""
	for item in data:
		name = item['name']
		x = item['cx']
		y = item['cy']
		out += f"static Vec {name}_{typeName}_POS = Vec({x},{y});\n"
	out += '\n'
	return out

def output_list_data(typeName: str, data: List[Dict]):
	capsname = typeName.upper()
	out = f"enum {typeName}Id {{\n"
	for item in data:
		out += f"{item['name']}_{capsname},\n"
	out += f"{capsname}S_LEN\n}};\n\n"
	return out

if __name__ == "__main__":
	try:
		parser = argparse.ArgumentParser(description='generate coordinate data in .h file from SVG.')
		parser.add_argument('filename', metavar='SVGfilename')
		parser.add_argument('outfile', metavar='output_file.h')
		args = parser.parse_args()
		if not os.path.isfile(args.filename):
			raise UserException(f"cannot open SVG file '{args.filename}'")
		tree = xml.etree.ElementTree.parse(args.filename)
		data = panel_to_components(tree)
		posData = output_pos_data('PARAM', data['params'])
		posData += output_pos_data('INPUT', data['inputs'])
		posData += output_pos_data('OUTPUT', data['outputs'])
		posData += output_pos_data('LIGHT', data['lights'])
		posData += output_list_data('Param', data['params'])
		posData += output_list_data('Input', data['inputs'])
		posData += output_list_data('Output', data['outputs'])
		posData += output_list_data('Light', data['lights'])
		with open(args.outfile, 'w', encoding='utf-8') as f:
			f.write(posData)

	except KeyboardInterrupt:
		pass
	except UserException as e:
		eprint(e)
		sys.exit(1)
